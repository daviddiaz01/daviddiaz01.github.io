{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My Page","text":"<p>David Diaz \u2013 EGR 314</p>"},{"location":"#about-the-project","title":"About the Project","text":"<p>This project centers on the development of an autonomous line-following robot that uses sensor feedback to detect and follow a designated path. The robot integrates multiple subsystems working together to handle sensing, motor control, power regulation, and communication.</p> <p>As part of this team project, I am responsible for designing and implementing the Sensor Subsystem, which plays a critical role in detecting the line and guiding the robot's movement. This subsystem uses a color sensor to detect contrast on the ground and sends real-time data to the ESP32-S3 microcontroller, which processes the information and communicates with the motor controller.</p> <p>This site documents my individual contributions to the team project and includes my final block diagram, component selection, schematic, PCB design, communication API, and code resources.</p>"},{"location":"#key-objectives","title":"Key Objectives","text":"<ul> <li>Autonomous navigation \u2013 enable real-time path-following based on sensor input  </li> <li>Accurate sensor processing \u2013 utilize the ESP32-S3 to reliably read and process contrast data  </li> <li>Stable power management \u2013 ensure proper voltage regulation for the sensor and microcontroller  </li> </ul>"},{"location":"#project-subsystems","title":"Project Subsystems","text":"Subsystem Function Sensor Subsystem Detects line contrast and sends data to MCU Motor Control Drives wheels based on processed sensor input Power Management Regulates voltages for all hardware components Communication Allows serial/Bluetooth interaction for debugging"},{"location":"#development-process","title":"Development Process","text":"<ul> <li>Component selection \u2013 chose components based on accuracy, speed, and compatibility  </li> <li>Circuit design &amp; PCB layout \u2013 integrated all parts into a compact and functional PCB design  </li> <li>Firmware development \u2013 programmed the ESP32-S3 to handle sensor communication over I\u00b2C and send UART messages  </li> <li>Testing &amp; optimization \u2013 validated sensor performance in various lighting and surface conditions</li> </ul>"},{"location":"API/","title":"API","text":""},{"location":"API/#introduction","title":"Introduction","text":"<p>The Sensor Subsystem uses the OPT4060 RGBW Color Sensor to detect line contrast for a line-following robot. This sensor communicates with the ESP32-S3-WROOM-1-N4 over I\u00b2C. The ESP32 processes the RGBW data and calculates a signed <code>line_position</code> value, which it transmits via UART to other subsystems, including:</p> <ul> <li>Motor Controller (0x03)  </li> <li>OLED Display (0x04)  </li> <li>WiFi Module (0x05)  </li> </ul> <p>This API outlines the internal I\u00b2C communication protocol, UART message structure, and protocol compliance.</p> <p>This subsystem was fully tested and confirmed to work exactly as intended. All messages are reliably transmitted and received, and the calculated <code>line_position</code> values enable accurate path tracking during operation.</p>"},{"location":"API/#message-overview","title":"Message Overview","text":"Message Variable Name Type Min Max Example Line Position line_position int8_t -100 100 25"},{"location":"API/#internal-i2c-communication","title":"Internal I\u00b2C Communication","text":""},{"location":"API/#esp32-requests-sensor-data-from-opt4060","title":"ESP32 Requests Sensor Data from OPT4060","text":"Byte Description Type Value 1 I\u00b2C Command uint8_t 0x10 2 Source ID (ESP32) uint8_t 0x01 3 Destination (Sensor) uint8_t 0x02 4 End Byte uint8_t 0x42"},{"location":"API/#opt4060-sends-rgbw-data-to-esp32","title":"OPT4060 Sends RGBW Data to ESP32","text":"Byte Description Type Value 1 Message Type uint8_t 0x20 2 Source ID (Sensor) uint8_t 0x02 3 Color LSB uint8_t 0x7A 4 Color MSB uint8_t 0x00 5 Checksum uint8_t 0xA1 6 End Byte uint8_t 0x42"},{"location":"API/#esp32-internal-processing","title":"ESP32 Internal Processing","text":"<p>The ESP32 extracts and processes the RGBW data, mapping it to an <code>int8_t</code> <code>line_position</code> value between -100 and 100.</p> <ul> <li>Negative values: Indicates drift to the left  </li> <li>Positive values: Indicates drift to the right  </li> </ul> <p>This processed value is forwarded to the appropriate subsystems.</p>"},{"location":"API/#uart-message-format-esp32-sends-processed-data","title":"UART Message Format \u2013 ESP32 Sends Processed Data","text":""},{"location":"API/#to-motor-controller-0x03","title":"To Motor Controller (0x03)","text":"Byte Description Type Example 1 Start Byte uint8_t 0x41 2 Sender ID uint8_t 0x01 3 Receiver ID uint8_t 0x03 4 Line Position int8_t 25 5 End Byte uint8_t 0x42"},{"location":"API/#to-oled-display-0x04","title":"To OLED Display (0x04)","text":"Byte Description Type Example 1 Start Byte uint8_t 0x41 2 Sender ID uint8_t 0x01 3 Receiver ID uint8_t 0x04 4 Line Position int8_t 25 5 End Byte uint8_t 0x42"},{"location":"API/#to-wifi-module-0x05","title":"To WiFi Module (0x05)","text":"Byte Description Type Example 1 Start Byte uint8_t 0x41 2 Sender ID uint8_t 0x01 3 Receiver ID uint8_t 0x05 4 Line Position int8_t 25 5 End Byte uint8_t 0x42"},{"location":"API/#communication-flow","title":"Communication Flow","text":"Stage Description ESP32 initiates I\u00b2C request Sends command to OPT4060 for RGBW data OPT4060 responds Returns RGBW data over I\u00b2C ESP32 calculates line position Converts RGBW into a signed value (\u00b1100) ESP32 sends UART messages Sends result to Motor, Display, and WiFi subsystems"},{"location":"API/#data-type-summary","title":"Data Type Summary","text":"<ul> <li><code>line_position</code> is a signed 8-bit integer (<code>int8_t</code>)  </li> <li>Message framing bytes (<code>start</code>, <code>end</code>, <code>sender</code>, <code>receiver</code>) use <code>uint8_t</code> </li> <li>RGBW sensor data is transferred as raw <code>uint8_t</code> or <code>uint16_t</code> values  </li> </ul>"},{"location":"API/#code-zip-file","title":"Code Zip File","text":"<p>Download Zip File</p>"},{"location":"API/#source-code-repository","title":"Source Code Repository","text":"<p>You can view my full Sensor Subsystem API implementation code:</p> <p>https://github.com/daviddiaz01/API-SENSOR-DD.git</p>"},{"location":"API/#conclusion","title":"Conclusion","text":"<p>This API defines how the Sensor Subsystem communicates with other modules using both I\u00b2C and UART. It ensures reliable signed <code>line_position</code> transmission, correct subsystem addressing, and compliance with the course messaging protocol.  </p> <p>All communications and functionality were tested thoroughly. The subsystem performs consistently and as intended, with all messages reaching their destinations accurately and on time.</p>"},{"location":"BOM/","title":"BOM","text":""},{"location":"BOM/#pdf-purchase-request","title":"PDF Purchase Request","text":"<p>View (PDF)</p>"},{"location":"BOM/#bom-table","title":"BOM Table","text":"Part Name/Description Qty Unit Price (USD) Total Price (USD) Manufacturer Part Number Vendor Link Datasheet Link ESP32 Microcontroller 2 $5.06 $10.12 Espressif Systems ESP32-S3-WROOM-1-N4 Link Datasheet Color Sensor 2 $2.88 $5.76 Texas Instruments OPT4060DTSR Link Datasheet Voltage Regulator 2 $3.32 $6.64 ON Semiconductor LM2575D2T-3.3R4G Link Datasheet Inductor (330\u00b5H) 3 $0.96 $2.88 Bourns SRR1260-331K Link Datasheet Fuse (PTC Resettable) 3 $0.22 $0.66 Bourns MF-MSMF150/12 Link Datasheet Schottky Diode 3 $0.29 $0.87 ON Semiconductor SS14 Link N/A Capacitor (100\u00b5F) 4 $1.44 $5.76 Panasonic EEH-ZA1E101XP Link Datasheet Capacitor (68\u00b5F) 4 $2.82 $11.28 TDK C5750X5R1A686M230KA Link Datasheet Capacitor (0.1\u00b5F) 4 $0.08 $0.32 Samsung Electro-Mechanics CL10B104KB8NNNC Link Datasheet Resistor (10k\u03a9) 6 $0.10 $0.60 Vishay CRCW060310K0FKEA Link Datasheet Resistor (330\u03a9) 6 $0.10 $0.60 Panasonic ERA-3AEB331V Link Datasheet Resistor (220\u03a9) 6 $0.10 $0.60 TE Connectivity CRGCQ0805F220R Link Datasheet Header (3-position, Through Hole) 2 $0.17 $0.34 TE Connectivity 640456-3 Link Datasheet Push Button Switch 2 $1.98 $3.96 Panasonic ESB-33535A Link Datasheet USB Micro-B Connector 2 $0.77 $1.54 GCT USB3131-30-0230-A Link Datasheet Barrel Jack Connector 2 $1.01 $2.02 CUI Devices PJ-002BH-SMT-TR Link Datasheet"},{"location":"BOM/#total-bom-cost","title":"Total BOM Cost:","text":"<p>$53.95 </p>"},{"location":"BOM/#final-bill-of-materials-bom","title":"Final Bill of Materials (BOM)","text":"<p>The table below lists the final major components used in my Sensor Subsystem. Passive components such as resistors, capacitors, pushbuttons, and headers are excluded as instructed. This BOM reflects the exact components used on the final fabricated PCB.</p> <p>Each component was selected based on functionality, electrical compatibility, and integration with the ESP32-S3 microcontroller. The OPT4060 was chosen for its RGBW sensing accuracy and I\u00b2C support, while the ESP32-S3-WROOM-1-N4 was selected for its processing capabilities and UART communication features. Voltage regulators were chosen to ensure stable power for the microcontroller and sensor.</p> <p>All components listed below were successfully tested and functioned as intended in the final system.</p>"},{"location":"Block_Diagram/","title":"Block Diagram","text":""},{"location":"Block_Diagram/#block-diagram","title":"Block Diagram","text":""},{"location":"Block_Diagram/#design-explanation","title":"Design Explanation","text":"<p>The block diagram was designed to clearly represent the signal and power flow within the Sensor Subsystem. The ESP32-S3 is placed at the center as the core processor, with the OPT4060 sensor connected to its I\u00b2C interface using IO18 (SCL) and IO19 (SDA). This placement reflects the logical data flow from sensor input to microcontroller processing. Voltage regulators are shown supplying stable 5V and 3.3V to their respective components to highlight the power architecture.</p> <p>The layout was intentionally kept clean and modular to match the physical design on the PCB and make it easier to troubleshoot, test, and expand. By aligning the diagram with actual pin connections and subsystem boundaries, it provided a reliable blueprint for schematic and firmware development.</p>"},{"location":"Block_Diagram/#requirements-alignment","title":"Requirements Alignment","text":"<p>This block diagram meets the project\u2019s functional and performance requirements by ensuring all essential communication and power lines are accounted for and logically organized. It visually confirms how sensor data is gathered, processed, and transmitted in real-time, supporting the robot's line-following capabilities. The I\u00b2C and UART pathways are explicitly shown, reinforcing protocol compliance and inter-subsystem integration. This structure enabled smooth implementation of firmware and accurate wiring in the final hardware.</p>"},{"location":"Component_Selection/","title":"Component Selection","text":""},{"location":"Component_Selection/#david-diaz","title":"David Diaz","text":""},{"location":"Component_Selection/#egr-314-sensor-subsystem","title":"EGR 314 - Sensor Subsystem","text":""},{"location":"Component_Selection/#introduction","title":"Introduction","text":"<p>The sensor subsystem of the line-following robot detects and interprets the path, allowing precise navigation. It includes a color sensor to read contrast and an ESP32-S3 microcontroller to process data and control movement.</p> <p>This document outlines the selection of key components based on performance, compatibility, and integration, ensuring efficient operation and seamless communication within the system</p>"},{"location":"Component_Selection/#project-components-overview","title":"Project Components Overview","text":"Microcontroller Voltage Regulator Switch Power Supply Color Sensor USB Connector Barrel Jack"},{"location":"Component_Selection/#major-components","title":"Major Components","text":"Component Type Component Name Function in the System Color Sensor OPT4060 RGBW Detects line contrast and sends data via I2C Microcontroller ESP32-S3-WROOM-1-N4 Processes sensor data, controls robot functions Voltage Regulator LM2575D2T-3.3R4G Steps down 12V to 3.3V to power ESP32 and sensor Power Supply 12V AC-DC Adapter Provides power to the voltage regulator USB-to-Serial Adapter USB3131-30-0230-A Required for programming ESP32-S3 via USB Switch (Power ON/OFF) Panasonic ESB-33535A (SMT) Controls system power, turning it ON or OFF"},{"location":"Component_Selection/#component-comparison-justification","title":"Component Comparison &amp; Justification","text":"Component Type Option Pros Cons Microcontroller ESP32-S3-WROOM-1-N4 (Chosen) Powerful dual-core, WiFi &amp; Bluetooth, SMD, multiple GPIO &amp; I2C Requires external USB-UART adapter for flashing ESP8266 Cheaper, WiFi-enabled, good for basic IoT Less RAM, fewer peripherals, no Bluetooth STM32F411CEU6 Powerful ARM Cortex-M4, many peripherals No built-in WiFi/Bluetooth, requires external wireless module Color Sensor OPT4060 RGBW (Chosen) High-accuracy RGBW detection, I2C interface, compact SMD package More expensive than basic color sensors TCS34725 RGB Sensor Low cost, built-in IR blocking filter Lower accuracy, larger footprint AS7341 Spectral Sensor High precision with spectral channels More complex to interface, higher power consumption Voltage Regulator LM2575D2T-3.3R4G (Chosen) High efficiency, compact, low noise Requires external capacitors for stability AMS1117-3.3 LDO Simple, low cost, easy to use Less efficient (linear regulator), dissipates more heat MP2315 Switching Regulator Higher efficiency, adjustable voltage output Requires more external components, more complex circuit design"},{"location":"Component_Selection/#justification-of-component-choices","title":"Justification of Component Choices","text":"<p>Each of the above components was selected based on key factors such as electrical compatibility, ease of PCB integration, and availability.</p>"},{"location":"Component_Selection/#1-color-sensor-opt4060-rgbw","title":"1. Color Sensor - OPT4060 RGBW","text":"<ul> <li>Provides accurate RGBW color detection.</li> <li>Uses I2C communication, simplifying data transfer.</li> <li> <p>Compact and reliable for high-speed line tracking.</p> </li> <li> <p>Product Link: OPT4060 RGBW - DigiKey</p> </li> <li>Datasheet: OPT4060 RGBW Datasheet</li> </ul> <p></p>"},{"location":"Component_Selection/#2-microcontroller-esp32-s3-wroom-1-n4","title":"2. Microcontroller - ESP32-S3-WROOM-1-N4","text":"<ul> <li>High-performance microcontroller with WiFi and Bluetooth capabilities.</li> <li>Supports multiple I2C and UART peripherals for sensor communication.</li> <li> <p>Surface-mount package ensures compact PCB design.</p> </li> <li> <p>Product Link: ESP32-S3-WROOM-1-N4 - DigiKey</p> </li> <li>Datasheet: ESP32-S3-WROOM-1-N4 Datasheet</li> </ul> <p></p>"},{"location":"Component_Selection/#3-voltage-regulator-lm2575d2t-33r4g","title":"3. Voltage Regulator - LM2575D2T-3.3R4G","text":"<ul> <li>Steps down 12V to 3.3V efficiently.</li> <li>Low noise and high power stability.</li> <li> <p>Requires minimal external components for integration.</p> </li> <li> <p>Product Link:LM2575D2T-3.3R4G - DigiKey</p> </li> <li>Datasheet: (https://www.onsemi.com/pdf/datasheet/lm2575-d.pdf)</li> </ul> <p></p>"},{"location":"Component_Selection/#4-power-supply-12v-ac-dc-adapter","title":"4. Power Supply - 12V AC-DC Adapter","text":"<ul> <li>Provides a stable 12V power source.</li> <li> <p>Compatible with voltage regulator and ESP32 power requirements.</p> </li> <li> <p>Product Link: Tri-Mag L6R06H-120 - DigiKey</p> </li> <li>Datasheet: Tri-Mag L6R06H-120 Datasheet</li> </ul> <p></p>"},{"location":"Component_Selection/#5-usb-to-serial-adapter-usb3131-30-0230-a","title":"5. USB-to-Serial Adapter - USB3131-30-0230-A","text":"<ul> <li>Required for flashing firmware to the ESP32-S3.</li> <li> <p>Provides stable USB-to-UART communication.</p> </li> <li> <p>Product Link: USB3131-30-0230-A - DigiKey</p> </li> <li>Datasheet: USB3131-30-0230-A Datasheet</li> </ul> <p></p>"},{"location":"Component_Selection/#6-surface-mount-push-buttons-panasonic-esb-33535a-series","title":"6. Surface-Mount Push Buttons - Panasonic ESB-33535A Series","text":"<ul> <li>Used for RESET and BOOT mode selection.  </li> <li>Compact and easy to integrate into the PCB.  </li> <li>Provides long operational life.  </li> <li> <p>Unit Price: $1.98 per unit.  </p> </li> <li> <p>Product Link: Panasonic ESB-33535A - Digi-Key </p> </li> <li>Datasheet: Panasonic ESB-33535A Datasheet </li> </ul> <p></p>"},{"location":"Component_Selection/#esp32-s3-wroom-1-n4-component-specifications","title":"ESP32-S3-WROOM-1-N4 Component Specifications","text":"ESP Info Answer Model ESP32-S3-WROOM-1-N4 Product Page URL Espressif Product Page ESP32-S3-WROOM-1-N4 Datasheet URL Datasheet ESP32 S3 Datasheet URL ESP32-S3 Datasheet ESP32 S3 Technical Reference Manual URL Technical Manual Vendor link DigiKey Code Examples GitHub Libraries External Resources URL(s) Google Search Unit cost $3.80 (DigiKey) Absolute Maximum Current for entire IC 500 mA Supply Voltage Range Min: 3.0V / Nominal: 3.3V / Max: 3.6V Maximum GPIO current (per pin) 40 mA Supports External Interrupts? Yes Required Programming Hardware, Cost, URL CP2102 USB to UART ($6)"},{"location":"Component_Selection/#peripheral-availability","title":"Peripheral Availability","text":"Module # Available Needed Associated Pins (or * for any) UART 3 1 TXD0, RXD0 external SPI* 2 1 GPIO11, GPIO12, GPIO13, GPIO14 I2C 2 1 GPIO8 (SDA), GPIO9 (SCL) GPIO 36 4 * ADC 20 2 GPIO1, GPIO2 LED PWM 8 2 * Motor PWM 2 1 * USB Programmer 1 1 USB_D+, USB_D-"},{"location":"Component_Selection/#final-pinout-table-esp32-s3","title":"Final Pinout Table (ESP32-S3)","text":"ESP32 Pin Function Connected To IO18 I\u00b2C SCL OPT4060 IO19 I\u00b2C SDA OPT4060 IO10 INT Input OPT4060 Interrupt Pin IO15 Debug LED Output On-board LED IO47 UART TX To other subsystems IO46 UART RX From external sources"},{"location":"Component_Selection/#design-rationale","title":"Design Rationale","text":"<p>Each component was selected to ensure seamless operation and compatibility within the Sensor Subsystem. The ESP32-S3 was chosen for its built-in communication protocols (I\u00b2C and UART), which reduced the need for external logic. The OPT4060 was selected for its RGBW color detection capabilities and I\u00b2C simplicity. Both voltage regulators were added to ensure reliable power delivery from a 12V supply to the 5V and 3.3V rails needed by the ESP32 and sensor.</p> <p>This selection meets all subsystem requirements by supporting reliable data collection, processing, and communication while maintaining a compact and power-efficient design. All components were tested on the final PCB and confirmed to work as intended.</p>"},{"location":"Component_Selection/#esp32-s3-wroom-1-n4-pinout-diagram","title":"ESP32-S3-WROOM-1-N4 Pinout Diagram","text":""},{"location":"Component_Selection/#conclusion","title":"Conclusion","text":"<p>This component selection ensures the sensor subsystem works reliably with the ESP32-S3, enabling precise color detection and stable power management. Each component was chosen for optimal performance, seamless integration, and efficient operation within the line-following robot.</p>"},{"location":"Innovation/","title":"Innovation Showcase Poster","text":"<p>Below is our final Innovation Showcase poster, summarizing the design, implementation, and results of our autonomous line-following robot project.</p> <p></p>"},{"location":"Power_Budget/","title":"Power Budget","text":""},{"location":"Power_Budget/#power-budget-overview","title":"Power Budget Overview","text":"<p>This table provides a power budget analysis for the key components in the schematic, ensuring the system meets its power requirements efficiently.</p>"},{"location":"Power_Budget/#component-breakdown","title":"Component Breakdown","text":"Component Image Voltage (V) Current (mA) Power (mW) ESP32-S3-WROOM 3.3V 240mA 792mW LM2575D2T-3.3 Regulator 9V Input 500mA 4500mW (Input side) OPT4060 Color Sensor 3.3V 3mA 9.9mW USB Connector (5V, 500mA max) 5V 500mA 2500mW (2.5W) Barrel Jack Adapter 9V 1A 9000mW"},{"location":"Power_Budget/#total-estimated-power-consumption","title":"Total Estimated Power Consumption","text":"<ul> <li>Total power draw at 3.3V: 850mW</li> <li>Total power draw at 9V input: 1W </li> <li>Peak power consumption via USB (5V): 2.5W (500mA max)</li> <li>Total current draw at 3.3V: 253mA</li> <li>Total current draw from 9V Source: 122mA </li> </ul>"},{"location":"Power_Budget/#regulator-efficiency-considerations","title":"Regulator Efficiency Considerations","text":"<p>The LM2575D2T-3.3 is a switching regulator, meaning it has higher efficiency (80-90%). - Estimated output power: 850mW - Estimated input power (9V): 1.1W </p>"},{"location":"Reflection/","title":"Reflection","text":""},{"location":"Reflection/#lessons-learned","title":"Lessons Learned","text":"<ol> <li> <p>Early integration testing is critical. We learned that testing subsystems together early helps catch pin conflicts, timing issues, and logic errors before they become harder to fix.</p> </li> <li> <p>Protocol configuration must be precise. Setting up I\u00b2C and UART on the ESP32 taught us that proper configuration (pin mapping, baud rate, pull-ups) is essential for communication to work.</p> </li> <li> <p>Clear documentation streamlines collaboration. Creating block diagrams, state machines, and message flowcharts helped each subsystem team align and avoid miscommunication.</p> </li> <li> <p>Feedback leads to better design. After receiving critique during our design review, we improved our UART message structure and added clear framing bytes to reduce transmission errors.</p> </li> <li> <p>PCB layout impacts performance. We discovered that trace routing, component placement, and proper ground planes matter for both signal reliability and power stability.</p> </li> <li> <p>Power design is more complex than expected. Linear regulators were simple to use, but we realized they generate excess heat and are less efficient than switching regulators for higher current loads.</p> </li> <li> <p>Time management is key. Hardware takes longer than expected, especially fabrication, soldering, and debugging. Planning buffer time helped us meet deadlines.</p> </li> <li> <p>Version control improves teamwork. GitHub helped our team manage parallel development, track changes, and avoid overwriting each other's code.</p> </li> <li> <p>Subsystem testing is essential. Testing each module individually allowed us to isolate bugs and ensure each part worked before full integration.</p> </li> <li> <p>Debugging tools save time. Using logic analyzers, serial monitors, and test LEDs made it easier to verify communication and hardware behavior during development.</p> </li> </ol>"},{"location":"Reflection/#recommendations-for-future-students","title":"Recommendations for Future Students","text":"<ol> <li>Start your PCB design and schematic review early to leave time for iteration and manufacturing delays.  </li> <li>Clearly define your UART and I\u00b2C message structures as early as possible to avoid major changes later in the semester.  </li> <li>Use GitHub effectively \u2014 create issues, commit regularly, and keep your documentation in sync with your implementation.  </li> <li>Don\u2019t underestimate testing \u2014 test each subsystem individually and then as a whole system early and often.  </li> <li>Meet as a team regularly, even if progress feels slow, to maintain accountability and catch design problems before they grow.</li> </ol>"},{"location":"Reflection/#version-20-communication-architecture-improvements","title":"Version 2.0: Communication Architecture Improvements","text":"<p>If we were to redesign the communication system for Version 2.0 of this project, several improvements could be made to enhance robustness, scalability, and debuggability.</p> <p>First, we would modularize each communication protocol into separate software tasks or threads. For example, the UART message handling could be isolated from sensor data processing, reducing timing conflicts and increasing reliability. Implementing a queue-based UART buffer would allow us to decouple message sending and receiving from processing logic, making the system more fault-tolerant.</p> <p>We would also improve the message framing structure by adding checksum or CRC verification for better error detection. This would help prevent corrupted messages from being misinterpreted. Additionally, a universal message parser module could be shared across all subsystems, ensuring consistent decoding and reducing duplicate code.</p> <p>On the hardware side, we would add labeled test points for UART TX/RX and I\u00b2C lines, simplifying debugging and logic analyzer probing during development. Adding visual feedback LEDs to indicate communication status (e.g., TX activity, error states) would also improve field testing.</p> <p>To increase flexibility, we would switch to a fully addressable protocol that allows dynamic sender/receiver assignment, enabling future support for expanding the system with additional sensors or controllers. Lastly, abstracting message types into an enum structure and separating message payloads from headers would allow easier upgrades in future firmware releases.</p> <p>Together, these changes would make the communication architecture more maintainable, modular, and scalable for future iterations or more complex systems.</p>"},{"location":"Schematic/","title":"Schematic","text":""},{"location":"Schematic/#schematic-diagram","title":"Schematic Diagram","text":""},{"location":"Schematic/#pdf-link","title":"PDF Link","text":"<p>View Schematic (PDF)</p>"},{"location":"Schematic/#pcb-project-zip-file","title":"PCB Project Zip File","text":"<p>Download Zip File</p>"},{"location":"Schematic/#project-code-repository","title":"Project Code Repository","text":"<p>View Project Repository</p>"},{"location":"Schematic/#functional-overview","title":"Functional Overview","text":"<p>This schematic and PCB layout provide power regulation, sensor interfacing, and communication between the ESP32-S3 and other subsystems. The 12V input is stepped down to 5V and 3.3V using linear regulators. The OPT4060 sensor connects to the ESP32 via I\u00b2C (IO18/IO19), and the ESP32 sends processed line position data via UART to the Motor, Display, and WiFi subsystems. GPIO 15 drives a debug LED for visual feedback during testing.</p> <p>The circuit was fabricated, assembled, and tested. All components functioned as intended, and the PCB operated correctly under all expected conditions.</p>"},{"location":"Schematic/#design-considerations","title":"Design Considerations","text":"<p>The schematic was organized to minimize routing complexity and isolate analog/digital sections for signal integrity. Decoupling capacitors were placed close to power pins, and ground planes were used to reduce noise. The PCB was laid out compactly to fit within project constraints while maintaining clear silkscreen labeling for ease of assembly and debugging.</p>"},{"location":"Schematic/#version-20-hardware-improvements","title":"Version 2.0 Hardware Improvements","text":"<p>If I were to design a Version 2.0 of the Sensor Subsystem, I would consider the following improvements:</p> <ol> <li>Add onboard I\u00b2C pull-up resistors to improve signal integrity and reduce dependence on external components.</li> <li>Include test points for I\u00b2C and UART lines to allow easier in-circuit debugging and probing.</li> <li>Shrink board size further by using more compact packages or rearranging component placement.</li> <li>Integrate power indicator LEDs to visually confirm when 3.3V and 5V rails are active.</li> </ol> <p>These changes would enhance power stability, simplify debugging, and improve overall robustness and maintainability of the hardware.</p>"},{"location":"Schematic/#final-subsystem-hardware","title":"Final Subsystem Hardware","text":"<p>Below is the fabricated PCB for the Sensor Subsystem. It includes the ESP32-S3 microcontroller, voltage regulation circuitry, and I\u00b2C communication lines connected to the color sensor. This board was designed and assembled as part of my individual contribution to the project.</p> <p>The subsystem was fully tested and confirmed to function as intended, successfully detecting line color contrast and transmitting data to the main controller in real time.</p> <p> </p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"}]}